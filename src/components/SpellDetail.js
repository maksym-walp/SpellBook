import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import spellConfig from '../config/spellConfig.json';
import './SpellDetail.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è
const SpellDetail = () => {
  // –°—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è
  const [spell, setSpell] = useState(null);
  // –°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è (–¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω—å –∑ –µ—Ñ–µ–∫—Ç–∞–º–∏ –≤–∏—â–∏—Ö —Ä—ñ–≤–Ω—ñ–≤)
  const [selectedLevel, setSelectedLevel] = useState(null);
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è –∑ URL
  const { id } = useParams();

  // –ï—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    fetch(`/api/spells/${id}`)
      .then(res => res.json())
      .then(data => {
        setSpell(data);
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–∏–±—Ä–∞–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –Ω–∞ –±–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è
        setSelectedLevel(data.level);
      })
      .catch(err => console.error("Failed to fetch spell details:", err));
  }, [id]); // –ï—Ñ–µ–∫—Ç –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ, —è–∫—â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è id

  // –ü–æ–∫–∏ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (!spell) {
    return <div className="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
  const getDurationText = (duration) => {
    if (duration.unit === 'moment') return '–ú–∏—Ç—å';
    const unit = spellConfig.durationUnits.find(u => u.value === duration.unit);
    if (!unit) return '–ù–µ–≤—ñ–¥–æ–º–æ';
    
    if (!unit.requiresValue) return unit.label;
    if (duration.unit === 'custom') return `${duration.value} ${duration.customUnit}`;
    return `${duration.value} ${unit.label.toLowerCase()}`;
  };

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä—ñ–≤–Ω—ñ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è
  const availableLevels = [spell.level];
  if (spell.hasHigherLevels) {
    Object.keys(spell.higherLevels).forEach(level => {
      availableLevels.push(parseInt(level));
    });
  }
  availableLevels.sort((a, b) => a - b); // –°–æ—Ä—Ç—É—î–º–æ —Ä—ñ–≤–Ω—ñ

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
  const getCurrentDescription = () => {
    if (selectedLevel === spell.level) {
      return {
        narrative: spell.narrativeDescription,
        mechanical: spell.mechanicalDescription
      };
    }
    return spell.higherLevels[selectedLevel] || {
      narrative: '–ù–µ–º–∞—î –æ–ø–∏—Å—É –¥–ª—è —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è',
      mechanical: '–ù–µ–º–∞—î –æ–ø–∏—Å—É –¥–ª—è —Ü—å–æ–≥–æ —Ä—ñ–≤–Ω—è'
    };
  };

  const description = getCurrentDescription();

  return (
    <div className="spell-detail-container">
      <h1>{spell.name}</h1>

      {/* –ú–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è */}
      <div className="spell-meta">
        <span><strong>–†—ñ–≤–µ–Ω—å:</strong> {spell.level}</span>
        <span><strong>–ê—Ä–∫–∞–Ω—ñ—á–Ω—ñ —Ç—Ä–∞–¥–∏—Ü—ñ—ó:</strong> {spell.traditions.join(', ')}</span>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è */}
      <div className="spell-properties">
        <p><strong>üí† –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ–π:</strong> {spell.actions}</p>
        <p><strong>üö∂ –í—ñ–¥—Å—Ç–∞–Ω—å:</strong> {spell.range} {spellConfig.range.units}</p>
        <p><strong>‚åõ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</strong> {getDurationText(spell.duration)}</p>
        <p><strong>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:</strong> {spell.components.join(', ')}</p>
        <div className="spell-flags">
          <strong>–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:</strong>
          {spellConfig.flags.map(flag => (
            spell[flag.name] && (
              <span key={flag.name} className="flag">
                {flag.label}
              </span>
            )
          ))}
          {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–º–∞—î –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π */}
          {!spellConfig.flags.some(flag => spell[flag.name]) && (
            <span> –ë–µ–∑ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç–µ–π</span>
          )}
        </div>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—è, —è–∫—â–æ —î –µ—Ñ–µ–∫—Ç–∏ –≤–∏—â–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ */}
      {availableLevels.length > 1 && (
        <div className="level-tabs">
          {availableLevels.map(level => (
            <button
              key={level}
              className={`level-tab ${selectedLevel === level ? 'active' : ''}`}
              onClick={() => setSelectedLevel(level)}
            >
              {level} —Ä—ñ–≤–µ–Ω—å
            </button>
          ))}
        </div>
      )}

      {/* –ü–æ–≤–Ω–∏–π –æ–ø–∏—Å –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è */}
      <div className="spell-description-full">
        <div className="description-section">
          <h3>–ù–∞—Ä–∞—Ç–∏–≤–Ω–∏–π –æ–ø–∏—Å</h3>
          <p>{description.narrative}</p>
        </div>
        
        <div className="description-section">
          <h3>–ú–µ—Ö–∞–Ω—ñ—á–Ω–∏–π –æ–ø–∏—Å</h3>
          <p>{description.mechanical}</p>
        </div>
      </div>
    </div>
  );
};

export default SpellDetail;